services:
  app:
    build:
      context: ./
      dockerfile: dockerfiles/app.dockerfile
    working_dir: /workspace/src
    volumes:
      - ./:/workspace:cached
    env_file:
      - .env
    command: ["/bin/sh", "/workspace/scripts/django/start.sh"]
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend

  celery:
    build:
      context: ./
      dockerfile: dockerfiles/app.dockerfile
    working_dir: /workspace/src
    volumes:
      - ./:/workspace:cached
    env_file:
      - .env
    command: ["/bin/sh", "/workspace/scripts/celery/worker.sh"]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend

  celery-beat:
    build:
      context: ./
      dockerfile: dockerfiles/app.dockerfile
    volumes:
      - ./:/workspace:cached
    working_dir: /workspace/src
    env_file:
      - .env
    command: ["/bin/sh", "/workspace/scripts/celery/beat.sh"]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend

  redis:
    image: redis:alpine
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  db:
    build:
      context: ./
      dockerfile: dockerfiles/db.dockerfile
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    env_file:
      - .env
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres-data:

networks:
  backend: